version: '{build}'
pull_requests:
  do_not_increment_build_number: true
skip_tags: true
image: Visual Studio 2017
environment:
  matrix:
  - PLATFORM: x86
    BUILD_SYSTEM: mingw
#  - PLATFORM: x64
#    BUILD_SYSTEM: mingw
  - PLATFORM: x86
    BUILD_SYSTEM: msvc
    CONFIGURATION: Debug
  - PLATFORM: x86
    BUILD_SYSTEM: msvc
    CONFIGURATION: Release
  - PLATFORM: x64
    BUILD_SYSTEM: msvc
    CONFIGURATION: Debug
  - PLATFORM: x64
    BUILD_SYSTEM: msvc
    CONFIGURATION: Release
install:
#- SET LUAENV=lua51
#- cmd: .appveyor\install-lua.cmd

build_script:
- C:\mingw-w64\x86_64-7.2.0-posix-seh-rt_v5-rev1\mingw64\bin\mingw32-make --version
- C:\mingw-w64\x86_64-7.2.0-posix-seh-rt_v5-rev1\mingw64\bin\g++ --version
- git submodule update --init --recursive

# Remove sh.exe from the path otherwise CMake will complain:
# "sh.exe was found in your PATH, here: C:/Program Files/Git/usr/bin/sh.exe"
# and the MinGW build will not work (the Visual Studio build does not care).
- SET "PATH=%PATH:C:\Program Files\Git\usr\bin=%"

# Add mingw-w64 to PATH
- if [%BUILD_SYSTEM%]==[mingw] (
    SET "PATH=C:\mingw-w64\x86_64-7.2.0-posix-seh-rt_v5-rev1\mingw64\bin;%PATH%"
  )
- ECHO %PATH%
- if [%BUILD_SYSTEM%]==[mingw] (
    MKDIR bin &&
    CD bin &&
    cmake .. -G "MinGW Makefiles" &&
    mingw32-make
  )
- if [%BUILD_SYSTEM%]==[msvc] (
    msbuild "src\engine.sln" /m /verbosity:minimal /property:PlatformToolset=v141 /t:Clean,Build /p:Platform=%PLATFORM% /p:Configuration=%CONFIGURATION% /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  )

#create artifacts
after_build:
- xrbuild.cmd

test: off
artifacts:
- path: res/OpenXRay.Dx86.7z
  name: OpenXRay.Dx86.7z
- path: res/OpenXRay.Dx64.7z
  name: OpenXRay.Dx64.7z
- path: res/OpenXRay.Rx86.7z
  name: OpenXRay.Rx86.7z
- path: res/OpenXRay.Rx64.7z
  name: OpenXRay.Rx64.7z
